#include <iostream>
#include "vt_linalg"
#include "vt_kalman"

using namespace vt;

real_t dt = 1;
real_t hdts = 0.5 * dt * dt;
real_t base_noise_value = 0.001;

numeric_matrix<3, 3> F({{1, dt, hdts},
                        {0, 1,  dt},
                        {0, 0,  1}});
auto K = make_numeric_matrix<1, 3>({{1}});
numeric_matrix<3, 1> B;
numeric_matrix<1, 3> H({{1}});
numeric_matrix<3, 3> Q = numeric_matrix<3, 3>::diagonals(base_noise_value);
numeric_matrix<1, 1> R = numeric_matrix<1, 1>::diagonals(base_noise_value);
numeric_vector<3> x0; // {x, v, a}

kalman_filter_t<3, 1, 1> kf(F, B, H, Q, R, x0);

real_t data1[] = {1, 2, 3, 4, 5, 6, 7, 8};

real_t data2[] = {4, 5, 24, 33, 37, 46, 54, 59, 68, 72, 75, 83, 90, 94, 103, 111, 114, 119, 124, 130, 133, 142,
                         148, 155,
                         162, 169, 174, 181, 188, 193, 201, 205, 210, 218, 226, 232, 241, 245, 249, 257, 260, 267, 275,
                         282,
                         287, 295, 299, 305, 311, 317, 324, 327, 336, 342, 348, 355, 362, 369, 373, 380, 384, 390, 394,
                         401,
                         406, 413, 416, 425, 431, 438, 442, 448, 454, 461, 467, 470, 476, 483, 487, 494, 502, 506, 512,
                         519,
                         524, 533, 536, 545, 550, 555, 560, 567, 574, 581, 589, 595, 599, 604, 612, 617, 623, 627, 635,
                         638,
                         642, 647, 656, 662, 667, 674, 679, 685, 689, 694, 698, 705, 709, 714, 721, 728, 734, 739, 744,
                         751,
                         759, 765, 771, 777, 785, 793, 797, 805, 809, 817, 823, 828, 835, 842, 847, 856, 859, 867, 872,
                         878,
                         886, 893, 901, 905, 912, 918, 926, 931, 936, 943, 946, 950, 956, 964, 969, 978, 984, 988, 996,
                         1003,
                         1011, 1017, 1022, 1027, 1032, 1037, 1045, 1053, 1057, 1061, 1066, 1074, 1078, 1087, 1095, 1101,
                         1106,
                         1112, 1117, 1126, 1133, 1137, 1142, 1149, 1154, 1161, 1167, 1174, 1179, 1188, 1193, 1201, 1208,
                         1215,
                         1221, 1227, 1231, 1239, 1242, 1249, 1254, 1263, 1271, 1275, 1281, 1286, 1291, 1296, 1305, 1310,
                         1317,
                         1324, 1329, 1334, 1340, 1345, 1350, 1359, 1367, 1375, 1381, 1387, 1394, 1397, 1406, 1413, 1421,
                         1429,
                         1436, 1443, 1450, 1456, 1461, 1468, 1472, 1476, 1483, 1487, 1493, 1500, 1505, 1511, 1519, 1525,
                         1531,
                         1536, 1545, 1549, 1554, 1560, 1568, 1575, 1580, 1585, 1592, 1600, 1604, 1610, 1616, 1624, 1632,
                         1636,
                         1641, 1646, 1651, 1656, 1665, 1672, 1678, 1683, 1689, 1694, 1699, 1706, 1711, 1719, 1725, 1731,
                         1739,
                         1744, 1751, 1757, 1763, 1767, 1776, 1783, 1788, 1793, 1802, 1807, 1814, 1819, 1826, 1834, 1841,
                         1849,
                         1855, 1860, 1864, 1873, 1881, 1889, 1894, 1900, 1904, 1911, 1918, 1926, 1933, 1938, 1944, 1950,
                         1958,
                         1963, 1967, 1972, 1978, 1986, 1994, 2000, 2006, 2014, 2022, 2026, 2032, 2038, 2046, 2051, 2059,
                         2063,
                         2068, 2073, 2082, 2089, 2094, 2100, 2105, 2114, 2119, 2126, 2132, 2138, 2143, 2148, 2157, 2162,
                         2168,
                         2173, 2180, 2188, 2195, 2201, 2205, 2212, 2219, 2224, 2231, 2239, 2245, 2251, 2256, 2261, 2266,
                         2275,
                         2282, 2290, 2297, 2302, 2309, 2318, 2322, 2326, 2332, 2337, 2346, 2354, 2362, 2369, 2374, 2381,
                         2387,
                         2394, 2401, 2406, 2412, 2420, 2426, 2432, 2436, 2445, 2451, 2459, 2467, 2471, 2475, 2482, 2486,
                         2493,
                         2497, 2504, 2510, 2515, 2523, 2527, 2531, 2536, 2541, 2549, 2557, 2563, 2568, 2575, 2582, 2587,
                         2593,
                         2601, 2607, 2615, 2620, 2627, 2632, 2639, 2644, 2653, 2658, 2665, 2671, 2678, 2686, 2692, 2698,
                         2706,
                         2711, 2718, 2723, 2732, 2737, 2744, 2751, 2756, 2762, 2766, 2772, 2777, 2784, 2792, 2799, 2806,
                         2812,
                         2817, 2825, 2833, 2840, 2845, 2852, 2859, 2866, 2872, 2877, 2885, 2889, 2897, 2903, 2911, 2916,
                         2923,
                         2927, 2934, 2941, 2947, 2952, 2959, 2966, 2973, 2979, 2983, 2991, 2997, 3003, 3009, 3014, 3020,
                         3027,
                         3033, 3039, 3044, 3052, 3059, 3066, 3073, 3077, 3083, 3091, 3099, 3106, 3114, 3119, 3125, 3131,
                         3139,
                         3145, 3153, 3158, 3164, 3170, 3174, 3181, 3186, 3195, 3202, 3208, 3215, 3221, 3229, 3234, 3240,
                         3247,
                         3252, 3259, 3264, 3270, 3274, 3283, 3289, 3293, 3300, 3308, 3316, 3322, 3327, 3334, 3341, 3349,
                         3356,
                         3362, 3369, 3375, 3382, 3388, 3396, 3403, 3409, 3415, 3420, 3427, 3433, 3440, 3445, 3453, 3457,
                         3462,
                         3467, 3472, 3480, 3486, 3491, 3498, 3506, 3514, 3519, 3525, 3533, 3538, 3546, 3552, 3557, 3564,
                         3569,
                         3578, 3582, 3591, 3596, 3604, 3612, 3617, 3623, 3630, 3638, 3645, 3651, 3657, 3662, 3668, 3675,
                         3683,
                         3689, 3694, 3700, 3708, 3716, 3724, 3729, 3733, 3742, 3747, 3753, 3761, 3768, 3775, 3781, 3789,
                         3795,
                         3800, 3809, 3816, 3824, 3830, 3838, 3845, 3850, 3855, 3864, 3869, 3877, 3882, 3889, 3895, 3903,
                         3907,
                         3915, 3921, 3929, 3936, 3943, 3947, 3955, 3960, 3969, 3975, 3982, 3989, 3994, 4000};

int main() {
    static size_t i = 1;
    for (auto &x: data2) {
        std::cout << i++ << ',';
        kf.predict(make_numeric_vector({0}));
        kf.update(make_numeric_vector({x}));
        std::cout << x << ',';
//        std::cout << "Estimate:   ";
        for (auto &n: kf.state_vector()) {
            std::cout << n << ',';
        }
        std::cout << '\n';
    }

    return 0;
}
